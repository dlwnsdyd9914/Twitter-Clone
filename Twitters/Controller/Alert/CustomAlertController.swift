//
//  CustomAlertController.swift
//  Twitters
//
//  Created by Ïù¥Ï§ÄÏö© on 3/27/25.
//

import UIKit
import SwiftUI
import Then

/// Ìä∏ÏúÑÌÑ∞ Ïä§ÌÉÄÏùº ÌïòÎã®ÏóêÏÑú Ïò¨ÎùºÏò§Îäî Ïª§Ïä§ÌÖÄ Ïï°ÏÖò ÏãúÌä∏ (ÏïåÎüø) Ïª®Ìä∏Î°§Îü¨
final class CustomAlertController: UIViewController {

    /// ÌïòÎã®Ïóê Ïò¨ÎùºÏò¨ ÏΩòÌÖêÏ∏† Î∑∞ (Ïó¨Í∏∞ÏÑ† UITableView ÏÇ¨Ïö©)
    private let tableView = UITableView()

    private var tableViewHeight: CGFloat {
        let rowHeight: CGFloat = 60
        let cancelButtonHeight: CGFloat = 60
        let spacing: CGFloat = 20 // Ïó¨Ïú† Ïó¨Î∞±

        return CGFloat(viewModel.options.count) * rowHeight + cancelButtonHeight + spacing
    }


    /// ÌòÑÏû¨ ÏÇ¨Ïö©ÌïòÎäî UIWindowÎ•º Ï∞∏Ï°∞Ìï† Ïàò ÏûàÎèÑÎ°ù Ïû°ÏïÑÎë† (ÏÑ†ÌÉùÏÇ¨Ìï≠, ÏßÄÍ∏àÏùÄ ÏÇ¨Ïö© X)
    private var window: UIWindow?

    private let viewModel: ActionSheetViewModel

    /// ÌôîÎ©¥ Ï†ÑÏ≤¥Î•º ÎçÆÎäî Î∞òÌà¨Î™Ö Î∞∞Í≤Ω Î∑∞ (ÌÑ∞Ïπò Ïãú dismiss Ïö©ÎèÑ)
    private lazy var blackView = UIView().then {
        $0.alpha = 0 // ÏãúÏûëÏùÄ Ìà¨Î™ÖÌïòÍ≤å (ÌéòÏù¥Îìú Ïù∏ Ìö®Í≥ºÏö©)
        $0.backgroundColor = UIColor(white: 0, alpha: 0.4) // Í≤ÄÏ†ïÏÉâ Î∞òÌà¨Î™Ö Î∞∞Í≤Ω
        let tap = UITapGestureRecognizer(target: self, action: #selector(handleDismissal))
        $0.addGestureRecognizer(tap) // ÌÉ≠ÌïòÎ©¥ „ÖÇÎã´ÌûàÎèÑÎ°ù
    }

    private lazy var cancleButton = UIButton(type: .custom).then {
        $0.setTitle("Cancle", for: .normal)
        $0.titleLabel?.font = .systemFont(ofSize: 18)
        $0.setTitleColor(.black, for: .normal)
        $0.backgroundColor = .systemGroupedBackground
        $0.addTarget(self, action: #selector(handleDismissal), for: .touchUpInside)
    }

    private lazy var footerView = UIView().then {
        $0.addSubview(cancleButton)
        cancleButton.anchor(top: nil, leading: $0.leadingAnchor, trailing: $0.trailingAnchor, bottom: nil, paddingTop: 0, paddingLeading: 12, paddingTrailing: 12, paddingBottom: 0, width: 0, height: 50, centerX: nil, centerY: $0.centerYAnchor)
    }

    // MARK: - Life Cycle

    init(viewModel: ActionSheetViewModel) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func viewDidLoad() {
        super.viewDidLoad()

        setup()
        configureTableView()
        bindViewModel()
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)

        // Îì±Ïû• Ïï†ÎãàÎ©îÏù¥ÏÖò: Î∞∞Í≤ΩÏùÄ Ï†êÏ†ê Ïñ¥ÎëêÏõåÏßÄÍ≥†, ÌÖåÏù¥Î∏îÏùÄ ÏúÑÎ°ú Ïò¨ÎùºÏò¥
        UIView.animate(withDuration: 0.5) {
            self.tableView.transform = .identity // ÏõêÎûò ÏûêÎ¶¨Î°ú Ïù¥Îèô (ÏïÑÎûòÏÑú ÏúÑÎ°ú Ïò¨ÎùºÏò¥)
            self.blackView.alpha = 1 // Î∞∞Í≤Ω Î∑∞ ÌéòÏù¥Îìú Ïù∏
        }
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        cancleButton.clipsToBounds = true
        cancleButton.layer.cornerRadius = cancleButton.frame.height / 2
    }

    // MARK: - Actions

    @objc private func handleDismissal() {
        UIView.animate(withDuration: 0.3, animations: {
            self.tableView.transform = CGAffineTransform(translationX: 0, y: self.tableViewHeight)
            self.blackView.alpha = 0
        }) { _ in
            self.dismiss(animated: false)
        }
    }


    // MARK: - Setup

    /// Ï¥àÍ∏∞ ÏÑ§Ï†ï (Î∞∞Í≤Ω Ìà¨Î™ÖÏúºÎ°ú ÏÑ§Ï†ï)
    private func setup() {
        view.backgroundColor = .clear
    }

    /// ÌÖåÏù¥Î∏îÎ∑∞ Î∞è Î∏îÎûô Î∞∞Í≤Ω Íµ¨ÏÑ± + Ï¥àÍ∏∞ transform ÏÑ§Ï†ï
    private func configureTableView() {
        // Î∞∞Í≤Ω Î∑∞ Î®ºÏ†Ä Ï∂îÍ∞Ä (Îí§Ïóê ÍπîÎ¶¨Í≤å)
        view.addSubview(blackView)
        blackView.frame = view.frame // ÌôîÎ©¥ Ï†ÑÏ≤¥Î•º ÎçÆÍ≤å ÏÑ§Ï†ï

        // ÌÖåÏù¥Î∏î Î∑∞ Ï∂îÍ∞Ä (ÏïåÎüøÏ≤òÎüº Î≥¥Ïù¥Îäî ÏòÅÏó≠)
        view.addSubview(tableView)



        // Ïò§ÌÜ†Î†àÏù¥ÏïÑÏõÉ ÏÑ§Ï†ï: ÌïòÎã®Ïóê Í≥†Ï†ï, ÎÜíÏù¥ 300
        tableView.anchor(
            top: nil,
            leading: view.leadingAnchor,
            trailing: view.trailingAnchor,
            bottom: view.bottomAnchor,
            paddingTop: 0,
            paddingLeading: 0,
            paddingTrailing: 0,
            paddingBottom: 0,
            width: 0,
            height: tableViewHeight,
            centerX: nil,
            centerY: nil
        )

        // ÌÖåÏù¥Î∏îÎ∑∞ ÏÜçÏÑ± ÏÑ§Ï†ï
        tableView.dataSource = self
        tableView.delegate = self
        tableView.backgroundColor = .white // ÌÖåÏä§Ìä∏Ïö© ÏÉâÏÉÅ
        tableView.rowHeight = 60
        tableView.layer.cornerRadius = 5
        tableView.clipsToBounds = true
        tableView.isScrollEnabled = false
        tableView.separatorStyle = .none


        // ÏÖÄ Îì±Î°ù
        tableView.register(CustomAlertCell.self, forCellReuseIdentifier: Cell.customAlertCell)

        // üéØ ÏãúÏûë ÏúÑÏπò ÏÑ§Ï†ï: ÌôîÎ©¥ ÏïÑÎûòÎ°ú Ïà®Í≤®ÎÜìÏùå (Ïò¨ÎùºÏò¨ Ï§ÄÎπÑ)
        tableView.transform = CGAffineTransform(translationX: 0, y: tableViewHeight)

        // Î∞∞Í≤ΩÎèÑ Ìà¨Î™ÖÌïòÍ≤å ÏãúÏûë
        self.blackView.alpha = 0
    }

    private func bindViewModel() {
        viewModel.onHandleAction = { [weak self] in
            guard let self else { return }
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        }
    }
}

// MARK: - UITableViewDataSource
extension CustomAlertController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return viewModel.options.count // ÏûÑÏãú: ÏïåÎüø Ìï≠Î™© Ïàò
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        // Ïª§Ïä§ÌÖÄ ÏÖÄÎ°ú Ï∫êÏä§ÌåÖÌï¥ÏÑú Ïû¨ÏÇ¨Ïö©
        guard let cell = tableView.dequeueReusableCell(
            withIdentifier: Cell.customAlertCell,
            for: indexPath
        ) as? CustomAlertCell else {
            return UITableViewCell()
        }
        cell.selectionStyle = .none
        let option = viewModel.options[indexPath.row]
        cell.configure(with: option)

        return cell

    }
}

// MARK: - UITableViewDelegate
extension CustomAlertController: UITableViewDelegate {
    // ÌïÑÏöîÏãú ÏÖÄ ÏÑ†ÌÉù Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ Í∞ÄÎä•

    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return footerView
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let option = viewModel.options[indexPath.row]


        print("DEBUG: Selected option is \(option.description)")


        switch option {
        case .follow, .unfollow:
            viewModel.handleFollowAction()
            dismiss()
        case .report:
            print("DEBUG: Selected option is Report")
            dismiss()
        case .delete:
            break
        }

    }

    private func dismiss() {
        UIView.animate(withDuration: 0.3, animations: { [weak self] in
            guard let self else { return }
            self.blackView.alpha = 0
            self.tableView.transform = CGAffineTransform(translationX: 0, y: self.tableViewHeight)
        }, completion: { [weak self] _ in
            self?.dismiss(animated: true)
        })
    }
}

// MARK: - SwiftUI Preview ÏßÄÏõê
#Preview {

    let actionSheetViewModel = ActionSheetViewModel(userviewModel: UserViewModel(user: MockUserModel(didFollow: true)))

    VCPreView {
        CustomAlertController(viewModel: actionSheetViewModel)
    }
    .edgesIgnoringSafeArea(.all)
}
